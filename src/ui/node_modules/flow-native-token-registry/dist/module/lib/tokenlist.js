import { fetch } from 'cross-fetch';
import tokenlistMainnet from './../tokens/flow-mainnet.tokenlist.json';
import tokenlistTestnet from './../tokens/flow-testnet.tokenlist.json';
export var ENV;
(function (ENV) {
    ENV["Mainnet"] = "mainnet";
    ENV["Testnet"] = "testnet";
})(ENV || (ENV = {}));
export const CLUSTER_SLUGS = {
    mainnet: ENV.Mainnet,
    testnet: ENV.Testnet,
};
export class GitHubTokenListResolutionStrategy {
    repositories = {
        [ENV.Mainnet]: [
            'https://raw.githubusercontent.com/FlowFans/flow-token-list/main/src/tokens/flow-mainnet.tokenlist.json',
        ],
        [ENV.Testnet]: [
            'https://raw.githubusercontent.com/FlowFans/flow-token-list/main/src/tokens/flow-testnet.tokenlist.json',
        ],
    };
    resolve = (network = ENV.Mainnet) => {
        return queryJsonFiles(this.repositories[network]);
    };
}
export class CDNTokenListResolutionStrategy {
    repositories = {
        [ENV.Mainnet]: [
            'https://cdn.jsdelivr.net/gh/FlowFans/flow-token-list@main/src/tokens/flow-mainnet.tokenlist.json',
        ],
        [ENV.Testnet]: [
            'https://cdn.jsdelivr.net/gh/FlowFans/flow-token-list@main/src/tokens/flow-testnet.tokenlist.json',
        ],
    };
    resolve = (network = ENV.Mainnet) => {
        return queryJsonFiles(this.repositories[network]);
    };
}
const queryJsonFiles = async (files, network = ENV.Mainnet) => {
    const responses = (await Promise.all(files.map(async (repo) => {
        try {
            const response = await fetch(repo);
            const json = (await response.json());
            return json;
        }
        catch {
            console.info(`@flowfans/flow-native-token-registry: falling back to static repository.`);
            return network === ENV.Mainnet ? tokenlistMainnet : tokenlistTestnet;
        }
    })));
    return responses
        .map((tokenlist) => tokenlist.tokens)
        .reduce((acc, arr) => acc.concat(arr), []);
};
export var Strategy;
(function (Strategy) {
    Strategy["GitHub"] = "GitHub";
    Strategy["Static"] = "Static";
    Strategy["CDN"] = "CDN";
})(Strategy || (Strategy = {}));
export class StaticTokenListResolutionStrategy {
    resolve = (network = ENV.Mainnet) => {
        if (network === ENV.Mainnet)
            return tokenlistMainnet.tokens;
        return tokenlistTestnet.tokens;
    };
}
export class TokenListProvider {
    static strategies = {
        [Strategy.GitHub]: new GitHubTokenListResolutionStrategy(),
        [Strategy.Static]: new StaticTokenListResolutionStrategy(),
        [Strategy.CDN]: new CDNTokenListResolutionStrategy(),
    };
    resolve = async (strategy = Strategy.GitHub, network = ENV.Mainnet) => {
        return new TokenListContainer(await TokenListProvider.strategies[strategy].resolve(network));
    };
}
export class TokenListContainer {
    tokenList;
    constructor(tokenList) {
        this.tokenList = tokenList;
    }
    filterByTag = (tag) => {
        return new TokenListContainer(this.tokenList.filter((item) => (item.tags || []).includes(tag)));
    };
    excludeByTag = (tag) => {
        return new TokenListContainer(this.tokenList.filter((item) => !(item.tags || []).includes(tag)));
    };
    getList = () => {
        return this.tokenList;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5saXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90b2tlbmxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwQyxPQUFPLGdCQUFnQixNQUFNLHlDQUF5QyxDQUFDO0FBQ3ZFLE9BQU8sZ0JBQWdCLE1BQU0seUNBQXlDLENBQUM7QUFFdkUsTUFBTSxDQUFOLElBQVksR0FHWDtBQUhELFdBQVksR0FBRztJQUNiLDBCQUFtQixDQUFBO0lBQ25CLDBCQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFIVyxHQUFHLEtBQUgsR0FBRyxRQUdkO0FBb0RELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBMEI7SUFDbEQsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO0lBQ3BCLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztDQUNyQixDQUFDO0FBRUYsTUFBTSxPQUFPLGlDQUFpQztJQUM1QyxZQUFZLEdBQUc7UUFDYixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNiLHdHQUF3RztTQUN6RztRQUNELENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2Isd0dBQXdHO1NBQ3pHO0tBQ0YsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDLFVBQWUsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ3ZDLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUM7Q0FDSDtBQUVELE1BQU0sT0FBTyw4QkFBOEI7SUFDekMsWUFBWSxHQUFHO1FBQ2IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDYixrR0FBa0c7U0FDbkc7UUFDRCxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNiLGtHQUFrRztTQUNuRztLQUNGLENBQUM7SUFDRixPQUFPLEdBQUcs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