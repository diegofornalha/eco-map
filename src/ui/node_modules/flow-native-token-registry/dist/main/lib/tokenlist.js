"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenListContainer = exports.TokenListProvider = exports.StaticTokenListResolutionStrategy = exports.Strategy = exports.CDNTokenListResolutionStrategy = exports.GitHubTokenListResolutionStrategy = exports.CLUSTER_SLUGS = exports.ENV = void 0;
const cross_fetch_1 = require("cross-fetch");
const flow_mainnet_tokenlist_json_1 = __importDefault(require("./../tokens/flow-mainnet.tokenlist.json"));
const flow_testnet_tokenlist_json_1 = __importDefault(require("./../tokens/flow-testnet.tokenlist.json"));
var ENV;
(function (ENV) {
    ENV["Mainnet"] = "mainnet";
    ENV["Testnet"] = "testnet";
})(ENV = exports.ENV || (exports.ENV = {}));
exports.CLUSTER_SLUGS = {
    mainnet: ENV.Mainnet,
    testnet: ENV.Testnet,
};
class GitHubTokenListResolutionStrategy {
    constructor() {
        this.repositories = {
            [ENV.Mainnet]: [
                'https://raw.githubusercontent.com/FlowFans/flow-token-list/main/src/tokens/flow-mainnet.tokenlist.json',
            ],
            [ENV.Testnet]: [
                'https://raw.githubusercontent.com/FlowFans/flow-token-list/main/src/tokens/flow-testnet.tokenlist.json',
            ],
        };
        this.resolve = (network = ENV.Mainnet) => {
            return queryJsonFiles(this.repositories[network]);
        };
    }
}
exports.GitHubTokenListResolutionStrategy = GitHubTokenListResolutionStrategy;
class CDNTokenListResolutionStrategy {
    constructor() {
        this.repositories = {
            [ENV.Mainnet]: [
                'https://cdn.jsdelivr.net/gh/FlowFans/flow-token-list@main/src/tokens/flow-mainnet.tokenlist.json',
            ],
            [ENV.Testnet]: [
                'https://cdn.jsdelivr.net/gh/FlowFans/flow-token-list@main/src/tokens/flow-testnet.tokenlist.json',
            ],
        };
        this.resolve = (network = ENV.Mainnet) => {
            return queryJsonFiles(this.repositories[network]);
        };
    }
}
exports.CDNTokenListResolutionStrategy = CDNTokenListResolutionStrategy;
const queryJsonFiles = async (files, network = ENV.Mainnet) => {
    const responses = (await Promise.all(files.map(async (repo) => {
        try {
            const response = await (0, cross_fetch_1.fetch)(repo);
            const json = (await response.json());
            return json;
        }
        catch (_a) {
            console.info(`@flowfans/flow-native-token-registry: falling back to static repository.`);
            return network === ENV.Mainnet ? flow_mainnet_tokenlist_json_1.default : flow_testnet_tokenlist_json_1.default;
        }
    })));
    return responses
        .map((tokenlist) => tokenlist.tokens)
        .reduce((acc, arr) => acc.concat(arr), []);
};
var Strategy;
(function (Strategy) {
    Strategy["GitHub"] = "GitHub";
    Strategy["Static"] = "Static";
    Strategy["CDN"] = "CDN";
})(Strategy = exports.Strategy || (exports.Strategy = {}));
class StaticTokenListResolutionStrategy {
    constructor() {
        this.resolve = (network = ENV.Mainnet) => {
            if (network === ENV.Mainnet)
                return flow_mainnet_tokenlist_json_1.default.tokens;
            return flow_testnet_tokenlist_json_1.default.tokens;
        };
    }
}
exports.StaticTokenListResolutionStrategy = StaticTokenListResolutionStrategy;
class TokenListProvider {
    constructor() {
        this.resolve = async (strategy = Strategy.GitHub, network = ENV.Mainnet) => {
            return new TokenListContainer(await TokenListProvider.strategies[strategy].resolve(network));
        };
    }
}
exports.TokenListProvider = TokenListProvider;
TokenListProvider.strategies = {
    [Strategy.GitHub]: new GitHubTokenListResolutionStrategy(),
    [Strategy.Static]: new StaticTokenListResolutionStrategy(),
    [Strategy.CDN]: new CDNTokenListResolutionStrategy(),
};
class TokenListContainer {
    constructor(tokenList) {
        this.tokenList = tokenList;
        this.filterByTag = (tag) => {
            return new TokenListContainer(this.tokenList.filter((item) => (item.tags || []).includes(tag)));
        };
        this.excludeByTag = (tag) => {
            return new TokenListContainer(this.tokenList.filter((item) => !(item.tags || []).includes(tag)));
        };
        this.getList = () => {
            return this.tokenList;
        };
    }
}
exports.TokenListContainer = TokenListContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5saXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90b2tlbmxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNkNBQW9DO0FBRXBDLDBHQUF1RTtBQUN2RSwwR0FBdUU7QUFFdkUsSUFBWSxHQUdYO0FBSEQsV0FBWSxHQUFHO0lBQ2IsMEJBQW1CLENBQUE7SUFDbkIsMEJBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUhXLEdBQUcsR0FBSCxXQUFHLEtBQUgsV0FBRyxRQUdkO0FBb0RZLFFBQUEsYUFBYSxHQUEwQjtJQUNsRCxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87SUFDcEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO0NBQ3JCLENBQUM7QUFFRixNQUFhLGlDQUFpQztJQUE5QztRQUNFLGlCQUFZLEdBQUc7WUFDYixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDYix3R0FBd0c7YUFDekc7WUFDRCxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDYix3R0FBd0c7YUFDekc7U0FDRixDQUFDO1FBRUYsWUFBTyxHQUFHLENBQUMsVUFBZSxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDdkMsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQztJQUNKLENBQUM7Q0FBQTtBQWJELDhFQWFDO0FBRUQsTUFBYSw4QkFBOEI7SUFBM0M7UUFDRSxpQkFBWSxHQUFHO1lBQ2IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2Isa0dBQWtHO2FBQ25HO1lBQ0QsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2Isa0dBQWtHO2FBQ25HO1NBQ0YsQ0FBQztRQUNGLFlBQU8sR0FBRyxDQUFDLFVBQWUsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3ZDLE9BQU8sY0FB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