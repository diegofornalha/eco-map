"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const ava_1 = __importDefault(require("ava"));
const tokenlist_1 = require("./tokenlist");
(0, ava_1.default)('Token list is filterable by a tag', async (t) => {
    const list = (await new tokenlist_1.TokenListProvider().resolve(tokenlist_1.Strategy.Static, tokenlist_1.ENV.Mainnet))
        .filterByTag('nft')
        .getList();
    t.false(list.some((item) => item.symbol === 'SOL'));
});
(0, ava_1.default)('Token list can exclude by a tag', async (t) => {
    const list = (await new tokenlist_1.TokenListProvider().resolve(tokenlist_1.Strategy.Static, tokenlist_1.ENV.Mainnet))
        .excludeByTag('nft')
        .getList();
    t.false(list.some((item) => item.tags === ['nft']));
});
(0, ava_1.default)('Token list is a valid json', async (t) => {
    t.notThrows(() => {
        const content = fs_1.default
            .readFileSync('./src/tokens/flow-mainnet.tokenlist.json')
            .toString();
        JSON.parse(content.toString());
    });
});
(0, ava_1.default)('Token list does not have duplicate entries', async (t) => {
    const list = await new tokenlist_1.TokenListProvider().resolve(tokenlist_1.Strategy.GitHub, tokenlist_1.ENV.Mainnet);
    const map = new Map();
    list.getList().reduce((agg, item) => {
        const key = `${item.address}.${item.contractName}`;
        console.log(key);
        if (agg.has(key)) {
            console.log(key);
        }
        t.false(agg.has(key));
        agg.set(key, item);
        return agg;
    }, map);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5saXN0LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Rva2VubGlzdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW9CO0FBRXBCLDhDQUF1QjtBQUV2QiwyQ0FBMEU7QUFFMUUsSUFBQSxhQUFJLEVBQUMsbUNBQW1DLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3BELE1BQU0sSUFBSSxHQUFHLENBQ1gsTUFBTSxJQUFJLDZCQUFpQixFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFRLENBQUMsTUFBTSxFQUFFLGVBQUcsQ0FBQyxPQUFPLENBQUMsQ0FDcEU7U0FDRSxXQUFXLENBQUMsS0FBSyxDQUFDO1NBQ2xCLE9BQU8sRUFBRSxDQUFDO0lBRWIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFBLGFBQUksRUFBQyxpQ0FBaUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDbEQsTUFBTSxJQUFJLEdBQUcsQ0FDWCxNQUFNLElBQUksNkJBQWlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQVEsQ0FBQyxNQUFNLEVBQUUsZUFBRyxDQUFDLE9BQU8sQ0FBQyxDQUNwRTtTQUNFLFlBQVksQ0FBQyxLQUFLLENBQUM7U0FDbkIsT0FBTyxFQUFFLENBQUM7SUFFYixDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFBLGFBQUksRUFBQyw0QkFBNEIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDN0MsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDZixNQUFNLE9BQU8sR0FBRyxZQUFFO2FBQ2YsWUFBWSxDQUFDLDBDQUEwQyxDQUFDO2FBQ3hELFFBQVEsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBQSxhQUFJLEVBQUMsNENBQTRDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzdELE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSw2QkFBaUIsRUFBRSxDQUFDLE9BQU8sQ0FDaEQsb0JBQVEsQ0FBQyxNQUFNLEVBQ2YsZUFBRyxDQUFDLE9BQU8sQ0FDWixDQUFDO0lBRUYsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQXFCLENBQUM7SUFDekMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUNsQyxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbEI7UUFDRCxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNWLENBQUMsQ0FBQyxDQUFDIn0=